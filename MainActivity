package com.example.iskeduler;

import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.*;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.*;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private TextView welcomeText;
    private ListView taskListView;
    private Button logoutButton, addTaskButton, deleteTaskButton;
    private EditText taskInput;
    private ArrayList<String> taskList;
    private ArrayAdapter<String> adapter;
    private FirebaseAuth auth;
    private DatabaseReference tasksRef;
    private int selectedItemPosition = -1; // Initially no task selected

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize Firebase Auth
        auth = FirebaseAuth.getInstance();

        // Initialize Firebase Realtime Database reference for tasks
        FirebaseUser user = auth.getCurrentUser();
        if (user == null) {
            // User is not authenticated, redirect to login
            finish();
            return;
        }

        tasksRef = FirebaseDatabase.getInstance().getReference("tasks").child(user.getUid());

        welcomeText = findViewById(R.id.welcome_text);
        taskListView = findViewById(R.id.taskListView);
        logoutButton = findViewById(R.id.logout_button);
        taskInput = findViewById(R.id.taskInput);
        addTaskButton = findViewById(R.id.addTaskButton);
        deleteTaskButton = findViewById(R.id.deleteTaskButton);

        welcomeText.setText("Welcome, " + user.getDisplayName());

        // Example: Displaying tasks in a ListView
        taskList = new ArrayList<>();
        adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, taskList);
        taskListView.setAdapter(adapter);

        // Task Button
        addTaskButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String task = taskInput.getText().toString().trim();
                if (!task.isEmpty()) {
                    addTask(task);
                    taskInput.setText("");
                } else {
                    Toast.makeText(MainActivity.this, "Add Text.", Toast.LENGTH_SHORT).show();
                }
            }
        });

        deleteTaskButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (selectedItemPosition >= 0 && selectedItemPosition < taskList.size()) {
                    String selectedTaskey = taskList.get(selectedItemPosition);
                    deleteTask(selectedTaskey);
                }
            }
        });

        taskListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
               if (selectedItemPosition >=0){
                   taskListView.getChildAt(selectedItemPosition).setBackgroundColor(Color.TRANSPARENT);
               }

                // Highlight the selected item with the chosen color
                selectedItemPosition = position;
                view.setBackgroundColor(getResources().getColor(R.color.selected_task_color));
                deleteTaskButton.setVisibility(View.VISIBLE); // Show delete button
            }
        });

        taskListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                // Handle long click (if needed)
                return true;
            }
        });

        loadTasks();

        // Logout Button Click Listener
        logoutButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Sign out the user
                auth.signOut();
                finish(); // Close the MainActivity
            }
        });
    }

    private void addTask(String task) {
        String taskId = tasksRef.push().getKey();
        if (taskId != null) {
            tasksRef.child(taskId).setValue(task);
        }
    }

    private void deleteTask(String task) {
        DatabaseReference taskReference = tasksRef.child(task);
        taskReference.removeValue();
        taskList.remove(selectedItemPosition);
        adapter.notifyDataSetChanged();
        selectedItemPosition = -1; // Reset selection
        deleteTaskButton.setVisibility(View.GONE); // Hide delete button
    }

    private void loadTasks() {
        tasksRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                taskList.clear();
                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
                    String task = snapshot.getValue(String.class);
                    if (task != null) {
                        taskList.add(task);
                    }
                }
                adapter.notifyDataSetChanged();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                // Handle read error (if any)
            }
        });
    }
}
